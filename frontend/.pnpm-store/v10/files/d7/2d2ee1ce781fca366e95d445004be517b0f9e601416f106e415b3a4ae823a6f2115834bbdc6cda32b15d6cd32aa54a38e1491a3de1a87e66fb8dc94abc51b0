{"version":3,"sources":["../src/sparkline.tsx","../src/utils.ts","../src/area-chart.tsx","../src/legend.tsx","../src/tooltip.tsx","../src/line-chart.tsx","../src/bar-chart.tsx"],"sourcesContent":["import { Box, BoxProps, useTheme } from '@chakra-ui/react'\n\nimport { AreaChart, Area, ResponsiveContainer, YAxis } from 'recharts'\nimport type { CurveProps } from 'recharts'\nimport { createCategoryColors } from './utils'\nimport { useId } from 'react'\n\nexport interface SparklineProps extends BoxProps {\n  /**\n   * The chart data.\n   */\n  data: Array<Record<string, string | number>>\n  /**\n   * The categories to display, values map to keys in data.\n   * @default ['value']\n   */\n  categories?: string[]\n  /**\n   * Colors to use for each category.\n   * @default ['primary', 'gray']\n   */\n  colors?: string[]\n  /**\n   * The curve type of the area.\n   */\n  curveType?: CurveProps['type']\n  /**\n   * The width of the line.\n   */\n  strokeWidth?: number\n  /**\n   * The sparkline variant.\n   * @default gradient\n   */\n  variant?: 'line' | 'solid' | 'gradient'\n  /**\n   * Whether to show animation.\n   * @default false\n   */\n  showAnimation?: boolean\n  /**\n   * The animation duration.\n   * @default 500\n   */\n  animationDuration?: number\n  /**\n   * Whether to connect null values.\n   * @default true\n   */\n  connectNulls?: boolean\n  /**\n   * Whether to stack the categories.\n   * @default false\n   */\n  stack?: boolean\n}\n\n/**\n * Sparkline\n * @see Docs https://saas-ui.dev/docs/components/visualization/sparkline\n */\nexport const Sparkline = (props: SparklineProps) => {\n  const {\n    data = [],\n    categories = ['value'],\n    curveType,\n    colors = ['primary', 'gray'],\n    strokeWidth = 1,\n    variant = 'gradient',\n    showAnimation = false,\n    animationDuration = 500,\n    connectNulls = true,\n    stack = false,\n    ...rest\n  } = props\n  const theme = useTheme()\n\n  const id = useId()\n\n  const categoryColors = createCategoryColors(categories, colors, theme)\n  const getColor = (category: string) => {\n    return categoryColors[category]\n  }\n\n  const getGradientId = (category: string) => {\n    return `${id}-${category}-gradient`\n  }\n\n  const getFill = (category: string) => {\n    switch (variant) {\n      case 'solid':\n        return getColor(category)\n      case 'gradient':\n        return `url(#${getGradientId(category)})`\n      default:\n        return 'transparent'\n    }\n  }\n\n  return (\n    <Box\n      {...rest}\n      sx={{\n        '--sparkline-fill-opacity': '0.2',\n        '--sparkline-gradient-start-opacity': '0.8',\n        '--sparkline-gradient-end-opacity': '0',\n        ...rest.sx,\n      }}\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\" minWidth=\"0\">\n        <AreaChart\n          data={data}\n          margin={{ top: 2, right: 0, left: 0, bottom: 0 }}\n        >\n          <defs>\n            {categories.map((category) => (\n              <linearGradient\n                key={category}\n                id={getGradientId(category)}\n                x1=\"0\"\n                y1=\"0\"\n                x2=\"0\"\n                y2=\"1\"\n              >\n                <stop\n                  offset=\"5%\"\n                  stopColor={getColor(category)}\n                  stopOpacity=\"var(--sparkline-gradient-start-opacity))\"\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor={getColor(category)}\n                  stopOpacity=\"var(--sparkline-gradient-end-opacity)\"\n                />\n              </linearGradient>\n            ))}\n          </defs>\n\n          <YAxis\n            tick={false}\n            axisLine={false}\n            width={0}\n            domain={['dataMin', 'dataMax']}\n          />\n\n          {categories.map((category) => (\n            <Area\n              key={category}\n              dataKey={category}\n              stroke={getColor(category)}\n              strokeWidth={strokeWidth}\n              fill={getFill(category)}\n              fillOpacity=\"var(--sparkline-fill-opacity)\"\n              type={curveType}\n              isAnimationActive={showAnimation}\n              animationDuration={animationDuration}\n              connectNulls={connectNulls}\n              stackId={stack ? 'a' : undefined}\n            />\n          ))}\n        </AreaChart>\n      </ResponsiveContainer>\n    </Box>\n  )\n}\n\n/**\n * @deprecated Use `Sparkline` instead.\n */\nexport const Sparklines = Sparkline\n","export const createCategoryColors = (\n  categories: string[],\n  colors: string[],\n  theme: any\n) => {\n  return Object.fromEntries(\n    categories.map((category, index) => {\n      const color = getColor(colors[index] ?? 'gray.500', theme)\n      return [category, color]\n    })\n  )\n}\n\nexport const getColor = (color: string, theme: any) => {\n  if (color.match(/\\.[0-9]{2,3}/)) {\n    return `var(--chakra-colors-${color.replace('.', '-')})`\n  } else if (theme.colors[color]) {\n    return theme.colors[color]?.[500]\n  }\n\n  return color\n}\n","import * as React from 'react'\n\nimport { Box, useColorModeValue, useTheme } from '@chakra-ui/react'\nimport {\n  AreaChart as ReAreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from 'recharts'\nimport type { AxisDomain } from 'recharts/types/util/types'\n\nimport { ChartLegend } from './legend'\nimport { createCategoryColors } from './utils'\nimport { ChartTooltip } from './tooltip'\nimport { BaseChartProps, CurveType } from './types'\n\nexport interface AreaChartProps extends BaseChartProps {\n  /**\n   * Whether to connect null values.\n   */\n  connectNulls?: boolean\n  /**\n   * The curve type of the area.\n   */\n  curveType?: CurveType\n  /**\n   * The width of the line.\n   */\n  strokeWidth?: string | number\n  /**\n   * Whether to stack the areas.\n   */\n  stack?: boolean\n  /**\n   * The type of offset function used to generate the lower and upper values in the series array. The four types are built-in offsets in d3-shape.\n   */\n  stackOffset?: 'expand' | 'none' | 'wiggle' | 'silhouette'\n  /**\n   * The area chart variant.\n   * @default gradient\n   */\n  variant?: 'solid' | 'gradient' | 'line'\n  /**\n   * The lower bound of the y-axis.\n   * @default 0\n   */\n  minValue?: number | 'auto'\n\n  /**\n   * The upper bound of the y-axis.\n   * @default 'auto'\n   */\n  maxValue?: number | 'auto'\n}\n\n/**\n * AreaChart\n * @see Docs https://saas-ui.dev/docs/components/visualization/area-chart\n */\nexport const AreaChart = React.forwardRef<HTMLDivElement, AreaChartProps>(\n  (props, ref) => {\n    const {\n      data = [],\n      categories = [],\n      colors = ['primary', 'cyan'],\n      height,\n      connectNulls = false,\n      curveType = 'linear',\n      index = 'date',\n      startEndOnly = false,\n      intervalType = 'equidistantPreserveStart',\n      allowDecimals = true,\n      strokeWidth = 2,\n      showAnimation = true,\n      showGrid = true,\n      showLegend = true,\n      showTooltip = true,\n      showXAxis = true,\n      showYAxis = true,\n      stack = false,\n      stackOffset,\n      yAxisWidth = 40,\n      legendHeight = 32,\n      animationDuration = 500,\n      valueFormatter,\n      variant = 'gradient',\n      tooltipContent,\n      children,\n      minValue = 0,\n      maxValue = 'auto',\n    } = props\n\n    const theme = useTheme()\n    const id = React.useId()\n\n    const categoryColors = createCategoryColors(categories, colors, theme)\n    const getColor = (category: string) => {\n      return categoryColors[category]\n    }\n\n    const getGradientId = (category: string) => {\n      return `${id}-${category}-gradient`\n    }\n\n    const getFill = (category: string) => {\n      switch (variant) {\n        case 'solid':\n          return getColor(category)\n        case 'gradient':\n          return `url(#${getGradientId(category)})`\n        default:\n          return 'transparent'\n      }\n    }\n\n    const yAxisDomain: AxisDomain = [minValue, maxValue]\n\n    return (\n      <Box\n        ref={ref}\n        height={height}\n        fontSize=\"sm\"\n        sx={{\n          '--chart-gradient-start-opacity': '0.8',\n          '--chart-gradient-end-opacity': '0',\n        }}\n      >\n        <ResponsiveContainer width=\"100%\" height=\"100%\" minWidth=\"0\">\n          <ReAreaChart data={data} stackOffset={stackOffset}>\n            {showGrid && (\n              <CartesianGrid\n                strokeDasharray=\" 1 1 1\"\n                vertical={false}\n                strokeOpacity={useColorModeValue(0.8, 0.3)}\n              />\n            )}\n\n            <XAxis\n              padding={{ left: 20, right: 20 }}\n              dataKey={index}\n              hide={!showXAxis}\n              tick={{ transform: 'translate(0, 6)' }}\n              ticks={\n                startEndOnly\n                  ? [data[0][index], data[data.length - 1][index]]\n                  : undefined\n              }\n              interval={startEndOnly ? 'preserveStartEnd' : intervalType}\n              tickLine={false}\n              axisLine={false}\n              minTickGap={5}\n              style={{\n                color: 'var(--chakra-colors-muted)',\n              }}\n            />\n\n            <YAxis\n              width={yAxisWidth}\n              hide={!showYAxis}\n              axisLine={false}\n              tickLine={false}\n              tick={{ transform: 'translate(-3, 0)' }}\n              // 5 is the default, but 6 typically gives better results\n              tickCount={6}\n              type=\"number\"\n              tickFormatter={valueFormatter}\n              allowDecimals={allowDecimals}\n              domain={yAxisDomain}\n              style={{\n                color: 'var(--chakra-colors-muted)',\n              }}\n            />\n\n            {showTooltip && (\n              <Tooltip\n                formatter={valueFormatter}\n                content={\n                  tooltipContent\n                    ? tooltipContent\n                    : (props) => (\n                        <ChartTooltip\n                          {...props}\n                          categoryColors={categoryColors}\n                        />\n                      )\n                }\n              />\n            )}\n\n            {showLegend && (\n              <Legend\n                verticalAlign=\"top\"\n                align=\"right\"\n                height={legendHeight}\n                content={({ payload }) => {\n                  return (\n                    <ChartLegend\n                      payload={payload}\n                      categoryColors={categoryColors}\n                    />\n                  )\n                }}\n              />\n            )}\n\n            <defs>\n              {categories.map((category) => (\n                <linearGradient\n                  key={category}\n                  id={getGradientId(category)}\n                  x1=\"0\"\n                  y1=\"0\"\n                  x2=\"0\"\n                  y2=\"1\"\n                >\n                  <stop\n                    offset=\"5%\"\n                    stopColor={getColor(category)}\n                    stopOpacity=\"var(--chart-gradient-start-opacity)\"\n                  />\n                  <stop\n                    offset=\"95%\"\n                    stopColor={getColor(category)}\n                    stopOpacity=\"var(--chart-gradient-end-opacity)\"\n                  />\n                </linearGradient>\n              ))}\n            </defs>\n\n            {children}\n\n            {categories.map((category) => (\n              <Area\n                key={category}\n                type={curveType}\n                dataKey={category}\n                stroke={getColor(category)}\n                strokeWidth={strokeWidth}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                fill={getFill(category)}\n                isAnimationActive={showAnimation}\n                animationDuration={animationDuration}\n                stackId={stack ? 'a' : undefined}\n                connectNulls={connectNulls}\n              />\n            ))}\n          </ReAreaChart>\n        </ResponsiveContainer>\n      </Box>\n    )\n  }\n)\n","import { Box, HStack, forwardRef } from '@chakra-ui/react'\nimport { Payload } from 'recharts/types/component/DefaultLegendContent'\n\nexport interface ChartLegendProps {\n  payload?: Payload[]\n  categoryColors: Record<string, string>\n}\n\nexport const ChartLegend = forwardRef<ChartLegendProps, 'div'>(\n  ({ payload, categoryColors }, ref) => {\n    return (\n      <HStack ref={ref} justifyContent=\"flex-end\" spacing=\"2\">\n        {payload?.map((entry, index) => (\n          <HStack key={`item-${index}`} spacing=\"1\">\n            <Box\n              rounded=\"full\"\n              bg={categoryColors[entry.value as string] ?? entry.color}\n              boxSize=\"2\"\n            />\n            <Box as=\"span\">{entry.value}</Box>\n          </HStack>\n        ))}\n      </HStack>\n    )\n  }\n)\n","import { Box, HStack, Text, useStyleConfig } from '@chakra-ui/react'\nimport React from 'react'\nimport {\n  NameType,\n  ValueType,\n  Props,\n} from 'recharts/types/component/DefaultTooltipContent'\n\nexport interface ChartTooltipProps<\n  TValue extends ValueType,\n  TName extends NameType,\n> extends Props<TValue, TName> {\n  categoryColors: Record<string, string>\n}\n\nexport const ChartTooltip = <TValue extends ValueType, TName extends NameType>(\n  props: ChartTooltipProps<TValue, TName>\n) => {\n  const {\n    categoryColors,\n    contentStyle = {},\n    itemStyle = {},\n    labelStyle = {},\n    payload,\n    formatter,\n    wrapperClassName,\n    labelClassName,\n    label,\n    labelFormatter,\n  } = props\n\n  const tooltipTheme = useStyleConfig('Tooltip')\n\n  const renderContent = () => {\n    if (payload && payload.length) {\n      const items = payload.map((entry, i) => {\n        if (\n          entry.type === 'none' ||\n          entry.value === undefined ||\n          entry.name === undefined\n        ) {\n          return null\n        }\n\n        const finalItemStyle = {\n          paddingTop: 2,\n          paddingBottom: 2,\n          ...itemStyle,\n        }\n        const finalFormatter = entry.formatter || formatter\n        const { value, name } = entry\n        let finalValue: React.ReactNode = value\n        let finalName: React.ReactNode = name\n        if (finalFormatter && finalValue != null && finalName != null) {\n          const formatted =\n            finalFormatter?.(value, name, entry, i, payload) ?? value\n          if (Array.isArray(formatted)) {\n            ;[finalValue, finalName] = formatted\n          } else {\n            finalValue = formatted\n          }\n        }\n\n        return (\n          <HStack\n            as=\"li\"\n            key={`tooltip-item-${i}`}\n            style={finalItemStyle}\n            spacing=\"1\"\n          >\n            <Box\n              rounded=\"full\"\n              bg={categoryColors[entry.name as string] ?? entry.color}\n              boxSize=\"2\"\n            />\n            {finalName ? (\n              <Box\n                flex=\"1\"\n                minWidth=\"80px\"\n                color=\"var(--tooltip-fg-muted, var(--chakra-colors-muted))\"\n              >\n                {finalName}\n              </Box>\n            ) : null}\n\n            <Box textAlign=\"right\">\n              <span>{finalValue}</span>\n              <span>{entry.unit || ''}</span>\n            </Box>\n          </HStack>\n        )\n      })\n\n      return <Box as=\"ul\">{items}</Box>\n    }\n\n    return null\n  }\n\n  const hasLabel = !!label\n  let finalLabel = hasLabel ? label : ''\n\n  if (hasLabel && labelFormatter && payload !== undefined && payload !== null) {\n    finalLabel = labelFormatter(label, payload)\n  }\n\n  return (\n    <Box\n      outline=\"none\"\n      flexDirection=\"column\"\n      className={wrapperClassName}\n      style={contentStyle}\n      sx={tooltipTheme}\n    >\n      <Text w=\"full\" className={labelClassName} style={labelStyle}>\n        {React.isValidElement(finalLabel) ? finalLabel : `${finalLabel}`}\n      </Text>\n      {renderContent()}\n    </Box>\n  )\n}\n","import * as React from 'react'\n\nimport { Box, useColorModeValue, useTheme } from '@chakra-ui/react'\nimport {\n  LineChart as ReLineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from 'recharts'\nimport type { CurveType } from 'recharts/types/shape/Curve'\n\nimport { ChartLegend } from './legend'\nimport { createCategoryColors } from './utils'\nimport { ChartTooltip } from './tooltip'\nimport { BaseChartProps } from './types'\nimport { AxisDomain } from 'recharts/types/util/types'\nimport type { LineDot } from 'recharts/types/cartesian/Line'\n\nexport interface LineChartProps extends BaseChartProps {\n  /**\n   * Whether to connect null values.\n   */\n  connectNulls?: boolean\n\n  /**\n   * The curve type of the line.\n   */\n  curveType?: CurveType\n\n  /**\n   * Whether to show line dots.\n   * @default false\n   */\n  dot?: LineDot\n\n  /**\n   * The width of the line.\n   */\n  strokeWidth?: string | number\n\n  /**\n   * The lower bound of the y-axis.\n   * @default 0\n   */\n  minValue?: number | 'auto'\n\n  /**\n   * The upper bound of the y-axis.\n   * @default 'auto'\n   */\n  maxValue?: number | 'auto'\n}\n\n/**\n * LineChart\n * @see Docs https://saas-ui.dev/docs/components/visualization/line-chart\n */\nexport const LineChart = React.forwardRef<HTMLDivElement, LineChartProps>(\n  (props, ref) => {\n    const {\n      data = [],\n      categories = [],\n      colors = ['primary'],\n      height,\n      connectNulls = false,\n      curveType = 'linear',\n      dot = false,\n      index = 'date',\n      startEndOnly = false,\n      intervalType = 'equidistantPreserveStart',\n      allowDecimals = true,\n      strokeWidth = 2,\n      showAnimation = true,\n      showGrid = true,\n      showLegend = true,\n      showTooltip = true,\n      showXAxis = true,\n      showYAxis = true,\n      yAxisWidth = 40,\n      legendHeight = 32,\n      animationDuration = 500,\n      minValue = 0,\n      maxValue = 'auto',\n      valueFormatter,\n      tooltipContent,\n      children,\n    } = props\n\n    const theme = useTheme()\n\n    const categoryColors = createCategoryColors(categories, colors, theme)\n    const getColor = (category: string) => {\n      return categoryColors[category]\n    }\n\n    const yAxisDomain: AxisDomain = [minValue, maxValue]\n\n    return (\n      <Box ref={ref} height={height} fontSize=\"sm\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\" minWidth=\"0\">\n          <ReLineChart data={data}>\n            {showGrid && (\n              <CartesianGrid\n                strokeDasharray=\" 1 1 1\"\n                vertical={false}\n                strokeOpacity={useColorModeValue(0.8, 0.3)}\n              />\n            )}\n\n            <XAxis\n              padding={{ left: 20, right: 20 }}\n              dataKey={index}\n              hide={!showXAxis}\n              tick={{ transform: 'translate(0, 6)' }}\n              ticks={\n                startEndOnly\n                  ? [data[0][index], data[data.length - 1][index]]\n                  : undefined\n              }\n              interval={startEndOnly ? 'preserveStartEnd' : intervalType}\n              tickLine={false}\n              axisLine={false}\n              minTickGap={5}\n              style={{\n                color: 'var(--chakra-colors-muted)',\n              }}\n            />\n\n            <YAxis\n              width={yAxisWidth}\n              hide={!showYAxis}\n              axisLine={false}\n              tickLine={false}\n              domain={yAxisDomain}\n              tick={{ transform: 'translate(-3, 0)' }}\n              // 5 is the default, but 6 typically gives better results\n              tickCount={6}\n              type=\"number\"\n              tickFormatter={valueFormatter}\n              allowDecimals={allowDecimals}\n              style={{\n                color: 'var(--chakra-colors-muted)',\n              }}\n            />\n\n            {showTooltip && (\n              <Tooltip\n                formatter={valueFormatter}\n                content={\n                  tooltipContent\n                    ? tooltipContent\n                    : (props) => (\n                        <ChartTooltip\n                          {...props}\n                          categoryColors={categoryColors}\n                        />\n                      )\n                }\n              />\n            )}\n\n            {showLegend && (\n              <Legend\n                verticalAlign=\"top\"\n                align=\"right\"\n                height={legendHeight}\n                content={({ payload }) => {\n                  return (\n                    <ChartLegend\n                      payload={payload}\n                      categoryColors={categoryColors}\n                    />\n                  )\n                }}\n              />\n            )}\n\n            {children}\n\n            {categories.map((category) => (\n              <Line\n                key={category}\n                type={curveType}\n                dataKey={category}\n                dot={dot}\n                stroke={getColor(category)}\n                strokeWidth={strokeWidth}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                isAnimationActive={showAnimation}\n                animationDuration={animationDuration}\n                connectNulls={connectNulls}\n              />\n            ))}\n          </ReLineChart>\n        </ResponsiveContainer>\n      </Box>\n    )\n  }\n)\n","import * as React from 'react'\n\nimport { Box, useColorModeValue, useTheme } from '@chakra-ui/react'\nimport {\n  BarChart as ReBarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from 'recharts'\nimport type { AxisDomain } from 'recharts/types/util/types'\n\nimport { ChartLegend } from './legend'\nimport { ChartTooltip } from './tooltip'\nimport { createCategoryColors } from './utils'\nimport { BaseChartProps } from './types'\n\nexport interface BarChartProps extends BaseChartProps {\n  /**\n   * Gap between bars in pixels or percentage.\n   */\n  barGap?: string | number\n\n  /**\n   * Gap between categories in pixels or percentage.\n   */\n  barCategoryGap?: string | number\n\n  /**\n   * Size of the bars in pixels.\n   */\n  barSize?: number\n\n  /**\n   * Radius of the bars.\n   */\n  radius?: number | [number, number, number, number]\n\n  /**\n   * Whether to stack the bars.\n   */\n  stack?: boolean\n\n  /**\n   * The type of offset function used to generate the lower and upper values in the series array. The four types are built-in offsets in d3-shape.\n   */\n  stackOffset?: 'expand' | 'none' | 'wiggle' | 'silhouette' | 'sign'\n\n  /**\n   * The bar chart variant.\n   * @default gradient\n   */\n  variant?: 'solid' | 'gradient'\n\n  /**\n   * The lower bound of the y-axis.\n   * @default 0\n   */\n  minValue?: number | 'auto'\n\n  /**\n   * The upper bound of the y-axis.\n   * @default 'auto'\n   */\n  maxValue?: number | 'auto'\n}\n\n/**\n * BarChart\n * @see Docs https://saas-ui.dev/docs/components/visualization/bar-chart\n */\nexport const BarChart = React.forwardRef<HTMLDivElement, BarChartProps>(\n  (props, ref) => {\n    const {\n      data = [],\n      categories = [],\n      colors = ['primary', 'cyan'],\n      height,\n      index = 'date',\n      barGap = '2',\n      barCategoryGap = '10%',\n      barSize,\n      startEndOnly = false,\n      intervalType = 'equidistantPreserveStart',\n      allowDecimals = true,\n      showAnimation = true,\n      showGrid = true,\n      showLegend = true,\n      showTooltip = true,\n      showXAxis = true,\n      showYAxis = true,\n      stack = false,\n      stackOffset,\n      yAxisWidth = 40,\n      legendHeight = 32,\n      animationDuration = 500,\n      minValue = 0,\n      maxValue = 'auto',\n      valueFormatter,\n      variant = 'gradient',\n      tooltipContent,\n      radius = stack ? 0 : [2, 2, 0, 0],\n      children,\n    } = props\n\n    const theme = useTheme()\n    const id = React.useId()\n\n    const categoryColors = createCategoryColors(categories, colors, theme)\n    const getColor = (category: string) => {\n      return categoryColors[category]\n    }\n\n    const getGradientId = (category: string) => {\n      return `${id}-${category}-gradient`\n    }\n\n    const getFill = (category: string) => {\n      switch (variant) {\n        case 'solid':\n          return getColor(category)\n        case 'gradient':\n          return `url(#${getGradientId(category)})`\n        default:\n          return 'transparent'\n      }\n    }\n\n    const yAxisDomain: AxisDomain = [minValue, maxValue]\n\n    return (\n      <Box\n        ref={ref}\n        height={height}\n        fontSize=\"sm\"\n        sx={{\n          '--chart-cursor-bg': 'var(--chakra-colors-blackAlpha-100)',\n          '--chart-gradient-start-opacity': '0.8',\n          '--chart-gradient-end-opacity': '80',\n          _dark: {\n            '--chart-cursor-bg': 'var(--chakra-colors-whiteAlpha-100)',\n            '--chart-gradient-start-opacity': '80',\n            '--chart-gradient-end-opacity': '0.8',\n          },\n        }}\n      >\n        <ResponsiveContainer width=\"100%\" height=\"100%\" minWidth=\"0\">\n          <ReBarChart\n            data={data}\n            barCategoryGap={barCategoryGap}\n            barGap={barGap}\n            barSize={barSize}\n            stackOffset={stackOffset}\n          >\n            {showGrid && (\n              <CartesianGrid\n                strokeDasharray=\" 1 1 1\"\n                vertical={false}\n                strokeOpacity={useColorModeValue(0.8, 0.3)}\n              />\n            )}\n\n            <XAxis\n              padding={{ left: 20, right: 20 }}\n              dataKey={index}\n              hide={!showXAxis}\n              tick={{ transform: 'translate(0, 6)' }}\n              ticks={\n                startEndOnly\n                  ? [data[0][index], data[data.length - 1][index]]\n                  : undefined\n              }\n              interval={startEndOnly ? 'preserveStartEnd' : intervalType}\n              tickLine={false}\n              axisLine={false}\n              minTickGap={5}\n              style={{\n                color: 'var(--chakra-colors-muted)',\n              }}\n            />\n\n            <YAxis\n              width={yAxisWidth}\n              hide={!showYAxis}\n              axisLine={false}\n              tickLine={false}\n              tick={{ transform: 'translate(-3, 0)' }}\n              // 5 is the default, but 6 typically gives better results\n              tickCount={6}\n              type=\"number\"\n              tickFormatter={valueFormatter}\n              domain={yAxisDomain}\n              allowDecimals={allowDecimals}\n              style={{\n                color: 'var(--chakra-colors-muted)',\n              }}\n            />\n\n            {showTooltip && (\n              <Tooltip\n                formatter={valueFormatter}\n                cursor={{ fill: 'var(--chart-cursor-bg)' }}\n                content={\n                  tooltipContent\n                    ? tooltipContent\n                    : (props) => (\n                        <ChartTooltip\n                          {...props}\n                          categoryColors={categoryColors}\n                        />\n                      )\n                }\n              />\n            )}\n\n            {showLegend && (\n              <Legend\n                verticalAlign=\"top\"\n                align=\"right\"\n                height={legendHeight}\n                content={({ payload }) => {\n                  return (\n                    <ChartLegend\n                      payload={payload}\n                      categoryColors={categoryColors}\n                    />\n                  )\n                }}\n              />\n            )}\n\n            <defs>\n              {categories.map((category) => (\n                <linearGradient\n                  key={category}\n                  id={getGradientId(category)}\n                  x1=\"0\"\n                  y1=\"0\"\n                  x2=\"0\"\n                  y2=\"1\"\n                >\n                  <stop\n                    offset=\"5%\"\n                    stopColor={getColor(category)}\n                    stopOpacity=\"var(--chart-gradient-start-opacity)\"\n                  />\n                  <stop\n                    offset=\"95%\"\n                    stopColor={getColor(category)}\n                    stopOpacity=\"var(--chart-gradient-end-opacity)\"\n                  />\n                </linearGradient>\n              ))}\n            </defs>\n\n            {children}\n\n            {categories.map((category) => (\n              <Bar\n                key={category}\n                dataKey={category}\n                fill={getFill(category)}\n                color={getColor(category)}\n                isAnimationActive={showAnimation}\n                animationDuration={animationDuration}\n                stackId={stack ? 'a' : undefined}\n                radius={radius}\n              />\n            ))}\n          </ReBarChart>\n        </ResponsiveContainer>\n      </Box>\n    )\n  }\n)\n"],"mappings":"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","names":["getColor","React","Box","useTheme","Area","YAxis","ResponsiveContainer","Box","jsx","jsxs","Box","HStack","jsx","jsxs","jsx","jsxs","AreaChart","useTheme","getColor","Box","ResponsiveContainer","YAxis","props","Area","React","Box","useColorModeValue","useTheme","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Legend","jsx","jsxs","useTheme","getColor","Box","ResponsiveContainer","CartesianGrid","useColorModeValue","XAxis","YAxis","Tooltip","props","Legend","React","Box","useColorModeValue","useTheme","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Legend","jsx","jsxs","useTheme","getColor","Box","ResponsiveContainer","CartesianGrid","useColorModeValue","XAxis","YAxis","Tooltip","props","Legend"]}