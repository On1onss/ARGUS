{"version":3,"sources":["../../src/anatomy/index.ts","../../src/anatomy/create-anatomy.ts"],"sourcesContent":["import { anatomy } from './create-anatomy'\n\nexport const appShellAnatomy = anatomy('app-shell').parts(\n  'container',\n  'inner',\n  'main'\n)\n\nexport const emptyStateAnatomy = anatomy('emptystate').parts(\n  'container',\n  'body',\n  'icon',\n  'title',\n  'descripton',\n  'actions',\n  'footer'\n)\n\nexport const bannerAnatomy = anatomy('banner').parts(\n  'container',\n  'icon',\n  'content',\n  'title',\n  'description',\n  'actions',\n  'close'\n)\n\nexport const hotkeysAnantomy = anatomy('hotkeys').parts(\n  'container',\n  'group',\n  'groupTitle',\n  'item',\n  'command',\n  'then'\n)\n\nexport const loadingOverlayAnatomy = anatomy('loading-overlay').parts(\n  'overlay',\n  'text'\n)\n\nexport const navGroupAnatomy = anatomy('nav-group').parts(\n  'container',\n  'title',\n  'icon',\n  'content'\n)\n\nexport const navItemAnatomy = anatomy('nav-item').parts(\n  'item',\n  'link',\n  'inner',\n  'icon',\n  'label'\n)\n\nexport const nprogressAnatomy = anatomy('nprogress').parts('container', 'bar')\n\nexport const personaAnatomy = anatomy('persona').parts(\n  'container',\n  'details',\n  'avatar',\n  'label',\n  'secondaryLabel',\n  'tertiaryLabel'\n)\n\nexport const searchInputAnatomy = anatomy('search-input').parts(\n  'input',\n  'reset'\n)\n\nexport const sidebarAnatomy = anatomy('sidebar').parts(\n  'container',\n  'overlay',\n  'section',\n  'toggleWrapper',\n  'toggle'\n)\n\nexport const stepperAnatomy = anatomy('stepper').parts(\n  'container',\n  'steps',\n  'icon',\n  'content',\n  'title',\n  'separator'\n)\n\nexport const structuredListAnatomy = anatomy('structured-list').parts(\n  'list',\n  'item',\n  'button',\n  'header',\n  'cell',\n  'icon'\n)\n\nexport const propertyAnatomy = anatomy('property').parts(\n  'property',\n  'label',\n  'value'\n)\n\nexport const selectAnatomy = anatomy('select').parts(\n  'addon',\n  'field',\n  'element'\n)\n\nexport const timelineAnatomy = anatomy('timeline').parts(\n  'container',\n  'item',\n  'separator',\n  'icon',\n  'dot',\n  'track',\n  'content'\n)\n","export interface AnatomyPart {\n  selector: string\n  className: string\n  toString(): string\n}\n\nexport type AnatomyInstance<T extends string> = Omit<Anatomy<T>, 'parts'>\n\nexport type AnatomyPartName<T> = T extends AnatomyInstance<infer U> ? U : never\n\nexport interface Anatomy<T extends string> {\n  toPart: (part: string) => AnatomyPart\n  parts: <U extends string>(...parts: U[]) => AnatomyInstance<U>\n  extend: <V extends string>(...parts: V[]) => AnatomyInstance<T | V>\n  readonly keys: T[]\n  selectors: () => Record<T, string>\n  classnames: () => Record<T, string>\n  __type: T\n}\n\n/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\nexport function anatomy<T extends string = string>(\n  name: string,\n  map = {} as any\n): Anatomy<T> {\n  let called = false\n\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n  function assert() {\n    if (!called) {\n      called = true\n      return\n    }\n\n    throw new Error(\n      '[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?'\n    )\n  }\n\n  /**\n   * Add the core parts of the components\n   */\n  function parts<V extends string>(...values: V[]) {\n    assert()\n    for (const part of values) {\n      map[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<V>, 'parts'>\n  }\n\n  /**\n   * Extend the component anatomy to includes new parts\n   */\n  function extend<U extends string>(...parts: U[]) {\n    for (const part of parts) {\n      if (part in map) continue\n      map[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<T | U>, 'parts'>\n  }\n\n  /**\n   * Get all selectors for the component anatomy\n   */\n  function selectors() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).selector])\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all classNames for the component anatomy\n   */\n  function classnames() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).className])\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Creates the part object for the given part\n   */\n  function toPart(part: string) {\n    const el = ['container', 'root'].includes(part ?? '')\n      ? [name]\n      : [name, part]\n    const attr = el.filter(Boolean).join('__')\n    const className = `chakra-${attr}`\n\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part,\n    }\n\n    return partObj as typeof partObj & string\n  }\n\n  /**\n   * Used to get the derived type of the anatomy\n   */\n  const __type = {} as T\n\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys(): T[] {\n      return Object.keys(map) as T[]\n    },\n    __type,\n  }\n}\n"],"mappings":"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","names":["parts"]}