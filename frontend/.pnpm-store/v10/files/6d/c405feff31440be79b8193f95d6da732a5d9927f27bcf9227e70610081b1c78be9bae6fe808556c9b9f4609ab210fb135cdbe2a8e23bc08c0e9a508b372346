"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.urlResolver = exports.sendRequest = void 0;
const ono_1 = require("@jsdevtools/ono");
const url_js_1 = require("../util/url.js");
const errors_js_1 = require("../util/errors.js");
const sendRequest = async ({ init, redirects = [], timeout = 60000, url, }) => {
    url = new URL(url);
    redirects.push(url.href);
    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, timeout);
        const response = await fetch(url, {
            signal: controller.signal,
            ...init,
        });
        clearTimeout(timeoutId);
        if (response.status >= 400) {
            // gracefully handle HEAD method not allowed
            if (response.status === 405 && init?.method === 'HEAD') {
                return { response };
            }
            throw (0, ono_1.ono)({ status: response.status }, `HTTP ERROR ${response.status}`);
        }
        if (response.status >= 300) {
            if (redirects.length > 5) {
                throw new errors_js_1.ResolverError((0, ono_1.ono)({ status: response.status }, `Error requesting ${redirects[0]}. \nToo many redirects: \n  ${redirects.join(" \n  ")}`));
            }
            if (!("location" in response.headers) || !response.headers.location) {
                throw (0, ono_1.ono)({ status: response.status }, `HTTP ${response.status} redirect with no location header`);
            }
            return (0, exports.sendRequest)({
                init,
                redirects,
                timeout,
                url: (0, url_js_1.resolve)(url.href, response.headers.location),
            });
        }
        return { response };
    }
    catch (error) {
        throw new errors_js_1.ResolverError((0, ono_1.ono)(error, `Error requesting ${url.href}`), url.href);
    }
};
exports.sendRequest = sendRequest;
exports.urlResolver = {
    handler: async (file, arrayBuffer) => {
        let data = arrayBuffer;
        if (!data) {
            const { response } = await (0, exports.sendRequest)({
                init: {
                    method: 'GET',
                },
                url: file.url,
            });
            data = response.body ? await response.arrayBuffer() : new ArrayBuffer(0);
        }
        file.data = Buffer.from(data);
    },
};
