{"version":3,"sources":["../../client-core/src/auth.ts","../../client-core/src/bodySerializer.ts","../../client-core/src/pathSerializer.ts","../src/utils.ts","../src/client.ts"],"names":["getAuthToken","auth","callback","token","serializeFormDataPair","data","key","value","serializeUrlSearchParamsPair","formDataBodySerializer","body","v","jsonBodySerializer","urlSearchParamsBodySerializer","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","allowReserved","explode","name","joinedValues","separator","serializePrimitiveParam","serializeObjectParam","values","PATH_PARAM_RE","defaultPathSerializer","path","_url","url","matches","match","c","replaceValue","createQuerySerializer","array","object","queryParams","search","setAuthParams","security","options","x","buildUrl","getUrl","query","querySerializer","mergeConfigs","a","b","config","mergeHeaders","axiosHeadersKeywords","headers","mergedHeaders","header","iterator","createConfig","override","createClient","_config","configWithoutAuth","instance","axios","getConfig","setConfig","request","opts","_axios","optsWithoutAuth","response","error","e"],"mappings":"qBAmBO,IAAMA,EAAe,MAC1BC,CAAAA,CACAC,IACgC,CAChC,IAAMC,CACJ,CAAA,OAAOD,GAAa,UAAa,CAAA,MAAMA,EAASD,CAAI,CAAA,CAAIC,EAE1D,GAAKC,CAAAA,CAIL,OAAIF,CAAAA,CAAK,SAAW,QACX,CAAA,CAAA,OAAA,EAAUE,CAAK,CAGpBF,CAAAA,CAAAA,CAAAA,CAAK,SAAW,OACX,CAAA,CAAA,MAAA,EAAS,IAAKE,CAAAA,CAAK,CAAC,CAGtBA,CAAAA,CAAAA,CACT,ECvBMC,CAAwB,CAAA,CAACC,EAAgBC,CAAaC,CAAAA,CAAAA,GAAmB,CACzE,OAAOA,GAAU,QAAYA,EAAAA,CAAAA,YAAiB,KAChDF,CAAK,CAAA,MAAA,CAAOC,EAAKC,CAAK,CAAA,CAEtBF,CAAK,CAAA,MAAA,CAAOC,EAAK,IAAK,CAAA,SAAA,CAAUC,CAAK,CAAC,EAE1C,EAEMC,CAA+B,CAAA,CACnCH,CACAC,CAAAA,CAAAA,CACAC,IACG,CACC,OAAOA,GAAU,QACnBF,CAAAA,CAAAA,CAAK,OAAOC,CAAKC,CAAAA,CAAK,CAEtBF,CAAAA,CAAAA,CAAK,OAAOC,CAAK,CAAA,IAAA,CAAK,UAAUC,CAAK,CAAC,EAE1C,CAEaE,CAAAA,CAAAA,CAAyB,CACpC,cAAA,CACEC,GACG,CACH,IAAML,EAAO,IAAI,QAAA,CAEjB,OAAA,MAAO,CAAA,OAAA,CAAQK,CAAI,CAAA,CAAE,QAAQ,CAAC,CAACJ,EAAKC,CAAK,CAAA,GAAM,CAClBA,CAAU,EAAA,IAAA,GAGjC,KAAM,CAAA,OAAA,CAAQA,CAAK,CACrBA,CAAAA,CAAAA,CAAM,QAASI,CAAMP,EAAAA,CAAAA,CAAsBC,EAAMC,CAAKK,CAAAA,CAAC,CAAC,CAAA,CAExDP,EAAsBC,CAAMC,CAAAA,CAAAA,CAAKC,CAAK,CAE1C,EAAA,CAAC,EAEMF,CACT,CACF,CAEaO,CAAAA,CAAAA,CAAqB,CAChC,cAAoBF,CAAAA,CAAAA,EAClB,KAAK,SAAUA,CAAAA,CAAAA,CAAM,CAACJ,CAAKC,CAAAA,CAAAA,GACzB,OAAOA,CAAAA,EAAU,SAAWA,CAAM,CAAA,QAAA,GAAaA,CACjD,CACJ,EAEaM,CAAgC,CAAA,CAC3C,cACEH,CAAAA,CAAAA,EACG,CACH,IAAML,CAAAA,CAAO,IAAI,eAEjB,CAAA,OAAO,OAAA,OAAQK,CAAAA,CAAI,CAAE,CAAA,OAAA,CAAQ,CAAC,CAACJ,CAAAA,CAAKC,CAAK,CAAM,GAAA,CAClBA,GAAU,IAGjC,GAAA,KAAA,CAAM,OAAQA,CAAAA,CAAK,EACrBA,CAAM,CAAA,OAAA,CAASI,GAAMH,CAA6BH,CAAAA,CAAAA,CAAMC,EAAKK,CAAC,CAAC,CAE/DH,CAAAA,CAAAA,CAA6BH,EAAMC,CAAKC,CAAAA,CAAK,GAEjD,CAAC,CAAA,CAEMF,EAAK,QAAS,EACvB,CACF,CAAA,CCxDaS,EAAyBC,CAA+B,EAAA,CACnE,OAAQA,CAAO,EACb,KAAK,OACH,CAAA,OAAO,GACT,CAAA,KAAK,SACH,OAAO,GAAA,CACT,KAAK,QACH,CAAA,OAAO,IACT,QACE,OAAO,GACX,CACF,EAEaC,CAA2BD,CAAAA,CAAAA,EAA+B,CACrE,OAAQA,CAAAA,EACN,KAAK,MAAA,CACH,OAAO,GAAA,CACT,KAAK,eACH,CAAA,OAAO,IACT,KAAK,gBAAA,CACH,OAAO,KACT,CAAA,QACE,OAAO,GACX,CACF,CAEaE,CAAAA,CAAAA,CAA0BF,GAAgC,CACrE,OAAQA,GACN,KAAK,OACH,CAAA,OAAO,IACT,KAAK,QAAA,CACH,OAAO,GACT,CAAA,KAAK,SACH,OAAO,GAAA,CACT,QACE,OAAO,GACX,CACF,CAAA,CAEaG,EAAsB,CAAC,CAClC,cAAAC,CACA,CAAA,OAAA,CAAAC,CACA,CAAA,IAAA,CAAAC,EACA,KAAAN,CAAAA,CAAAA,CACA,MAAAR,CACF,CAAA,GAEM,CACJ,GAAI,CAACa,CAAS,CAAA,CACZ,IAAME,CACJH,CAAAA,CAAAA,CAAAA,CAAgBZ,EAAQA,CAAM,CAAA,GAAA,CAAKI,GAAM,kBAAmBA,CAAAA,CAAW,CAAC,CAAA,EACxE,KAAKK,CAAwBD,CAAAA,CAAK,CAAC,CACrC,CAAA,OAAQA,GACN,KAAK,OACH,CAAA,OAAO,IAAIO,CAAY,CAAA,CAAA,CACzB,KAAK,QACH,CAAA,OAAO,IAAID,CAAI,CAAA,CAAA,EAAIC,CAAY,CAAA,CAAA,CACjC,KAAK,QACH,CAAA,OAAOA,EACT,QACE,OAAO,GAAGD,CAAI,CAAA,CAAA,EAAIC,CAAY,CAAA,CAClC,CACF,CAEA,IAAMC,EAAYT,CAAsBC,CAAAA,CAAK,EACvCO,CAAef,CAAAA,CAAAA,CAClB,GAAKI,CAAAA,CAAAA,EACAI,IAAU,OAAWA,EAAAA,CAAAA,GAAU,SAC1BI,CAAgBR,CAAAA,CAAAA,CAAI,mBAAmBA,CAAW,CAAA,CAGpDa,CAAwB,CAAA,CAC7B,cAAAL,CACA,CAAA,IAAA,CAAAE,EACA,KAAOV,CAAAA,CACT,CAAC,CACF,CAAA,CACA,IAAKY,CAAAA,CAAS,EACjB,OAAOR,CAAAA,GAAU,SAAWA,CAAU,GAAA,QAAA,CAClCQ,EAAYD,CACZA,CAAAA,CACN,CAEaE,CAAAA,CAAAA,CAA0B,CAAC,CACtC,aAAA,CAAAL,EACA,IAAAE,CAAAA,CAAAA,CACA,MAAAd,CACF,CAAA,GAA+B,CAC7B,GAA2BA,GAAU,IACnC,CAAA,OAAO,GAGT,GAAI,OAAOA,GAAU,QACnB,CAAA,MAAM,IAAI,KAAA,CACR,2GACF,CAGF,CAAA,OAAO,GAAGc,CAAI,CAAA,CAAA,EAAIF,EAAgBZ,CAAQ,CAAA,kBAAA,CAAmBA,CAAK,CAAC,EACrE,CAEakB,CAAAA,CAAAA,CAAuB,CAAC,CACnC,aAAA,CAAAN,EACA,OAAAC,CAAAA,CAAAA,CACA,IAAAC,CAAAA,CAAAA,CACA,MAAAN,CACA,CAAA,KAAA,CAAAR,CACF,CAEM,GAAA,CACJ,GAAIA,CAAiB,YAAA,IAAA,CACnB,OAAO,CAAA,EAAGc,CAAI,CAAId,CAAAA,EAAAA,CAAAA,CAAM,aAAa,CAAA,CAAA,CAGvC,GAAIQ,CAAU,GAAA,YAAA,EAAgB,CAACK,CAAAA,CAAS,CACtC,IAAIM,CAAAA,CAAmB,EACvB,CAAA,MAAA,CAAO,QAAQnB,CAAK,CAAA,CAAE,OAAQ,CAAA,CAAC,CAACD,CAAKK,CAAAA,CAAC,IAAM,CAC1Ce,CAAAA,CAAS,CACP,GAAGA,CAAAA,CACHpB,CACAa,CAAAA,CAAAA,CAAiBR,EAAe,kBAAmBA,CAAAA,CAAW,CAChE,EACF,CAAC,EACD,IAAMW,CAAAA,CAAeI,CAAO,CAAA,IAAA,CAAK,GAAG,CACpC,CAAA,OAAQX,GACN,KAAK,OACH,OAAO,CAAA,EAAGM,CAAI,CAAA,CAAA,EAAIC,CAAY,CAChC,CAAA,CAAA,KAAK,QACH,OAAO,CAAA,CAAA,EAAIA,CAAY,CACzB,CAAA,CAAA,KAAK,QACH,CAAA,OAAO,IAAID,CAAI,CAAA,CAAA,EAAIC,CAAY,CACjC,CAAA,CAAA,QACE,OAAOA,CACX,CACF,CAEA,IAAMC,EAAYN,CAAuBF,CAAAA,CAAK,EACxCO,CAAe,CAAA,MAAA,CAAO,QAAQf,CAAK,CAAA,CACtC,GAAI,CAAA,CAAC,CAACD,CAAKK,CAAAA,CAAC,IACXa,CAAwB,CAAA,CACtB,cAAAL,CACA,CAAA,IAAA,CAAMJ,CAAU,GAAA,YAAA,CAAe,GAAGM,CAAI,CAAA,CAAA,EAAIf,CAAG,CAAMA,CAAAA,CAAAA,CAAAA,CAAAA,CACnD,MAAOK,CACT,CAAC,CACH,CAAA,CACC,KAAKY,CAAS,CAAA,CACjB,OAAOR,CAAU,GAAA,OAAA,EAAWA,IAAU,QAClCQ,CAAAA,CAAAA,CAAYD,CACZA,CAAAA,CACN,EC7JMK,IAAAA,CAAAA,CAAgB,cAEhBC,CAAwB,CAAA,CAAC,CAAE,IAAAC,CAAAA,CAAAA,CAAM,GAAKC,CAAAA,CAAK,IAAsB,CACrE,IAAIC,EAAMD,CACJE,CAAAA,CAAAA,CAAUF,EAAK,KAAMH,CAAAA,CAAa,CACxC,CAAA,GAAIK,EACF,IAAWC,IAAAA,CAAAA,IAASD,EAAS,CAC3B,IAAIZ,EAAU,KACVC,CAAAA,CAAAA,CAAOY,CAAM,CAAA,SAAA,CAAU,EAAGA,CAAM,CAAA,MAAA,CAAS,CAAC,CAC1ClB,CAAAA,CAAAA,CAA6B,SAE7BM,CAAK,CAAA,QAAA,CAAS,GAAG,CAAA,GACnBD,EAAU,IACVC,CAAAA,CAAAA,CAAOA,EAAK,SAAU,CAAA,CAAA,CAAGA,EAAK,MAAS,CAAA,CAAC,CAGtCA,CAAAA,CAAAA,CAAAA,CAAK,WAAW,GAAG,CAAA,EACrBA,EAAOA,CAAK,CAAA,SAAA,CAAU,CAAC,CACvBN,CAAAA,CAAAA,CAAQ,OACCM,EAAAA,CAAAA,CAAK,WAAW,GAAG,CAAA,GAC5BA,EAAOA,CAAK,CAAA,SAAA,CAAU,CAAC,CACvBN,CAAAA,CAAAA,CAAQ,QAGV,CAAA,CAAA,IAAMR,EAAQsB,CAAKR,CAAAA,CAAI,EAEvB,GAA2Bd,CAAAA,EAAU,KACnC,SAGF,GAAI,KAAM,CAAA,OAAA,CAAQA,CAAK,CAAG,CAAA,CACxBwB,EAAMA,CAAI,CAAA,OAAA,CACRE,EACA,CAAoB,CAAA,CAAE,OAAAb,CAAAA,CAAAA,CAAS,KAAAC,CAAM,CAAA,KAAA,CAAAN,EAAO,KAAAR,CAAAA,CAAM,CAAC,CACrD,CAAA,CACA,QACF,CAEA,GAAI,OAAOA,CAAAA,EAAU,SAAU,CAC7BwB,CAAAA,CAAMA,EAAI,OACRE,CAAAA,CAAAA,CACA,CAAqB,CAAA,CACnB,QAAAb,CACA,CAAA,IAAA,CAAAC,EACA,KAAAN,CAAAA,CAAAA,CACA,MAAOR,CACT,CAAC,CACH,CAAA,CACA,QACF,CAEA,GAAIQ,IAAU,QAAU,CAAA,CACtBgB,EAAMA,CAAI,CAAA,OAAA,CACRE,EACA,CAAIC,CAAAA,EAAAA,CAAAA,CAAwB,CAC1B,IAAAb,CAAAA,CAAAA,CACA,MAAOd,CACT,CAAC,CAAC,CACJ,CAAA,CAAA,CACA,QACF,CAEA,IAAM4B,CAAe,CAAA,kBAAA,CACnBpB,IAAU,OAAU,CAAA,CAAA,CAAA,EAAIR,CAAe,CAAMA,CAAAA,CAAAA,CAC/C,CACAwB,CAAAA,CAAAA,CAAMA,EAAI,OAAQE,CAAAA,CAAAA,CAAOE,CAAY,EACvC,CAEF,OAAOJ,CACT,CAAA,CAEaK,CAAwB,CAAA,CAAc,CACjD,aAAAjB,CAAAA,CAAAA,CACA,MAAAkB,CACA,CAAA,MAAA,CAAAC,CACF,CAA4B,CAAA,EACDC,GAAAA,CAAAA,EAAmB,CAC1C,IAAIC,CAAAA,CAAmB,EACvB,CAAA,GAAID,GAAe,OAAOA,CAAAA,EAAgB,QACxC,CAAA,IAAA,IAAWlB,KAAQkB,CAAa,CAAA,CAC9B,IAAMhC,CAAQgC,CAAAA,CAAAA,CAAYlB,CAAI,CAE9B,CAAA,GAA2Bd,CAAU,EAAA,IAAA,CAIrC,IAAI,KAAM,CAAA,OAAA,CAAQA,CAAK,CAAG,CAAA,CACxBiC,EAAS,CACP,GAAGA,CACH,CAAA,CAAA,CAAoB,CAClB,aAAArB,CAAAA,CAAAA,CACA,QAAS,IACT,CAAA,IAAA,CAAAE,EACA,KAAO,CAAA,MAAA,CACP,KAAAd,CAAAA,CAAAA,CACA,GAAG8B,CACL,CAAC,CACH,CACA,CAAA,QACF,CAEA,GAAI,OAAO9B,CAAU,EAAA,QAAA,CAAU,CAC7BiC,CAAS,CAAA,CACP,GAAGA,CACH,CAAA,CAAA,CAAqB,CACnB,aAAArB,CAAAA,CAAAA,CACA,OAAS,CAAA,IAAA,CACT,KAAAE,CACA,CAAA,KAAA,CAAO,aACP,KAAOd,CAAAA,CAAAA,CACP,GAAG+B,CACL,CAAC,CACH,CAAA,CACA,QACF,CAEAE,CAAAA,CAAS,CACP,GAAGA,CAAAA,CACHN,EAAwB,CACtB,aAAA,CAAAf,CACA,CAAA,IAAA,CAAAE,EACA,KAAOd,CAAAA,CACT,CAAC,CACH,EAAA,CACF,CAEF,OAAOiC,CAAAA,CAAO,IAAK,CAAA,GAAG,CACxB,CAIWC,CAAAA,CAAAA,CAAgB,MAAO,CAClC,QAAA,CAAAC,EACA,GAAGC,CACL,CAGQ,GAAA,CACN,QAAW1C,CAAQyC,IAAAA,CAAAA,CAAU,CAC3B,IAAMvC,CAAAA,CAAQ,MAAMyC,CAAa3C,CAAAA,CAAAA,CAAM0C,CAAQ,CAAA,IAAI,EAEnD,GAAI,CAACxC,EACH,SAGF,IAAMkB,EAAOpB,CAAK,CAAA,IAAA,EAAQ,eAE1B,CAAA,OAAQA,EAAK,EAAI,EACf,KAAK,OACE0C,CAAAA,CAAAA,CAAQ,QACXA,CAAQ,CAAA,KAAA,CAAQ,EAAC,CAAA,CAEnBA,EAAQ,KAAMtB,CAAAA,CAAI,EAAIlB,CACtB,CAAA,MACF,KAAK,QACL,CAAA,QACEwC,CAAQ,CAAA,OAAA,CAAQtB,CAAI,CAAIlB,CAAAA,CAAAA,CACxB,KACJ,CAEA,MACF,CACF,CAEa0C,CAAAA,CAAAA,CAAgCF,CAC/BG,EAAAA,CAAAA,CAAO,CACjB,IAAMH,CAAAA,CAAAA,CAAQ,KAEd,KAAQA,CAAAA,CAAAA,CAAQ,iBAAmC,SAAhBA,CAAAA,CAAAA,CAAQ,KAC3C,CAAA,eAAA,CACE,OAAOA,CAAQ,CAAA,eAAA,EAAoB,WAC/BA,CAAQ,CAAA,eAAA,CACRP,EAAsBO,CAAQ,CAAA,eAAe,CACnD,CAAA,GAAA,CAAKA,EAAQ,GACf,CAAC,EAIUG,CAAS,CAAA,CAAC,CACrB,IAAAjB,CAAAA,CAAAA,CACA,KAAAkB,CAAAA,CAAAA,CACA,gBAAAC,CACA,CAAA,GAAA,CAAKlB,CACP,CAKM,GAAA,CAEJ,IAAIC,CADYD,CAAAA,CAAAA,CAAK,UAAW,CAAA,GAAG,EAAIA,CAAO,CAAA,CAAA,CAAA,EAAIA,CAAI,CAElDD,CAAAA,CAAAA,CAAAA,GACFE,EAAMH,CAAsB,CAAA,CAAE,IAAAC,CAAAA,CAAAA,CAAM,IAAAE,CAAI,CAAC,GAE3C,IAAIS,CAAAA,CAASO,EAAQC,CAAgBD,CAAAA,CAAK,CAAI,CAAA,EAAA,CAC9C,OAAIP,CAAO,CAAA,UAAA,CAAW,GAAG,CACvBA,GAAAA,CAAAA,CAASA,EAAO,SAAU,CAAA,CAAC,CAEzBA,CAAAA,CAAAA,CAAAA,GACFT,GAAO,CAAIS,CAAAA,EAAAA,CAAM,IAEZT,CACT,CAAA,CAEakB,EAAe,CAACC,CAAAA,CAAWC,CAAsB,GAAA,CAC5D,IAAMC,CAAS,CAAA,CAAE,GAAGF,CAAG,CAAA,GAAGC,CAAE,CAC5B,CAAA,OAAAC,CAAO,CAAA,OAAA,CAAUC,EAAaH,CAAE,CAAA,OAAA,CAASC,EAAE,OAAO,CAAA,CAC3CC,CACT,CAKaE,CAAAA,CAAAA,CAAuB,CAClC,QAAA,CACA,SACA,KACA,CAAA,MAAA,CACA,QACA,MACA,CAAA,KACF,EAEaD,CAAe,CAAA,CAAA,GACvBE,CACsB,GAAA,CACzB,IAAMC,CAAsC,CAAA,GAC5C,IAAWC,IAAAA,CAAAA,IAAUF,EAAS,CAC5B,GAAI,CAACE,CAAAA,EAAU,OAAOA,CAAW,EAAA,QAAA,CAC/B,SAGF,IAAMC,CAAAA,CAAW,OAAO,OAAQD,CAAAA,CAAM,CAEtC,CAAA,IAAA,GAAW,CAACnD,CAAKC,CAAAA,CAAK,IAAKmD,CACzB,CAAA,GACEJ,EAAqB,QACnBhD,CAAAA,CACF,CACA,EAAA,OAAOC,GAAU,QAEjBiD,CAAAA,CAAAA,CAAclD,CAAG,CAAI,CAAA,CACnB,GAAIkD,CAAclD,CAAAA,CAAG,CACrB,CAAA,GAAGC,CACL,CACSA,CAAAA,KAAAA,GAAAA,CAAAA,GAAU,KACnB,OAAOiD,CAAAA,CAAclD,CAAG,CACf,CAAA,KAAA,GAAA,KAAA,CAAM,OAAQC,CAAAA,CAAK,EAC5B,IAAWI,IAAAA,CAAAA,IAAKJ,EAEdiD,CAAclD,CAAAA,CAAG,EAAI,CAAC,GAAIkD,CAAclD,CAAAA,CAAG,GAAK,EAAC,CAAIK,CAAW,CAEzDJ,CAAAA,KAAAA,CAAAA,GAAU,YAGnBiD,CAAclD,CAAAA,CAAG,CACf,CAAA,OAAOC,GAAU,QAAW,CAAA,IAAA,CAAK,UAAUA,CAAK,CAAA,CAAKA,GAG7D,CACA,OAAOiD,CACT,CAAA,CAEaG,EAAe,CAC1BC,CAAAA,CAAqD,EACP,IAAA,CAC9C,GAAGA,CACL,CAAA,EClRaC,IAAAA,CAAAA,CAAe,CAACT,CAAiB,CAAA,KAAe,CAC3D,IAAIU,EAAUb,CAAaU,CAAAA,CAAAA,EAAgBP,CAAAA,CAAM,EAG3C,CAAE,IAAA,CAAAnD,EAAM,GAAG8D,CAAkB,EAAID,CACjCE,CAAAA,CAAAA,CAAWC,CAAM,CAAA,MAAA,CAAOF,CAAiB,CAEzCG,CAAAA,CAAAA,CAAY,KAAe,CAAE,GAAGJ,CAAQ,CAExCK,CAAAA,CAAAA,CAAAA,CAAaf,CACjBU,GAAAA,CAAAA,CAAUb,EAAaa,CAASV,CAAAA,CAAM,EACtCY,CAAS,CAAA,QAAA,CAAW,CAClB,GAAGA,CAAAA,CAAS,QACZ,CAAA,GAAGF,EAEH,OAAST,CAAAA,CAAAA,CAAaW,EAAS,QAAS,CAAA,OAAA,CAASF,EAAQ,OAAO,CAClE,CACOI,CAAAA,CAAAA,IAIHE,CAA6B,CAAA,MAAOzB,GAAY,CACpD,IAAM0B,EAAO,CACX,GAAGP,CACH,CAAA,GAAGnB,EACH,KAAOA,CAAAA,CAAAA,CAAQ,OAASmB,CAAQ,CAAA,KAAA,EAASE,EACzC,OAASX,CAAAA,CAAAA,CAAaS,CAAQ,CAAA,OAAA,CAASnB,EAAQ,OAAO,CACxD,EAEI0B,CAAK,CAAA,QAAA,EACP,MAAM5B,CAAc,CAAA,CAClB,GAAG4B,CAAAA,CACH,SAAUA,CAAK,CAAA,QACjB,CAAC,CAGCA,CAAAA,CAAAA,CAAK,MAAQA,CAAK,CAAA,cAAA,GACpBA,CAAK,CAAA,IAAA,CAAOA,EAAK,cAAeA,CAAAA,CAAAA,CAAK,IAAI,CAG3C,CAAA,CAAA,IAAMtC,EAAMc,CAASwB,CAAAA,CAAI,CAEzB,CAAA,GAAI,CAEF,IAAMC,CAAAA,CAASD,EAAK,KAEd,CAAA,CAAE,KAAApE,CAAM,CAAA,GAAGsE,CAAgB,CAAA,CAAIF,EAC/BG,CAAW,CAAA,MAAMF,EAAO,CAC5B,GAAGC,EACH,OAASF,CAAAA,CAAAA,CAAK,OACd,CAAA,IAAA,CAAMA,EAAK,IACX,CAAA,OAAA,CAASA,EAAK,OAEd,CAAA,MAAA,CAAQA,EAAK,gBAAmBA,CAAAA,CAAAA,CAAK,KAAQ,CAAA,KAAA,CAAA,CAC7C,IAAAtC,CACF,CAAC,EAEG,CAAE,IAAA,CAAA1B,CAAK,CAAImE,CAAAA,CAAAA,CAEf,OAAIH,CAAAA,CAAK,eAAiB,MACpBA,GAAAA,CAAAA,CAAK,mBACP,MAAMA,CAAAA,CAAK,kBAAkBhE,CAAI,CAAA,CAG/BgE,CAAK,CAAA,mBAAA,GACPhE,EAAO,MAAMgE,CAAAA,CAAK,oBAAoBhE,CAAI,CAAA,CAAA,CAAA,CAIvC,CACL,GAAGmE,CAAAA,CACH,IAAMnE,CAAAA,CAAAA,EAAQ,EAChB,CACF,OAASoE,CAAO,CAAA,CACd,IAAMC,CAAID,CAAAA,CAAAA,CACV,GAAIJ,CAAAA,CAAK,aACP,MAAMK,CAAAA,CAGR,OAAAA,CAAE,CAAA,KAAA,CAAQA,EAAE,QAAU,EAAA,IAAA,EAAQ,EAAC,CACxBA,CACT,CACF,CAAA,CAEA,OAAO,CACL,QAAA,CAAA7B,EACA,MAASF,CAAAA,CAAAA,EAAYyB,CAAQ,CAAA,CAAE,GAAGzB,CAAS,CAAA,MAAA,CAAQ,QAAS,CAAC,CAAA,CAC7D,IAAMA,CAAYyB,EAAAA,CAAAA,CAAQ,CAAE,GAAGzB,EAAS,MAAQ,CAAA,KAAM,CAAC,CACvD,CAAA,SAAA,CAAAuB,EACA,IAAOvB,CAAAA,CAAAA,EAAYyB,CAAQ,CAAA,CAAE,GAAGzB,CAAS,CAAA,MAAA,CAAQ,MAAO,CAAC,CAAA,CACzD,SAAAqB,CACA,CAAA,OAAA,CAAUrB,CAAYyB,EAAAA,CAAAA,CAAQ,CAAE,GAAGzB,CAAAA,CAAS,OAAQ,SAAU,CAAC,EAC/D,KAAQA,CAAAA,CAAAA,EAAYyB,CAAQ,CAAA,CAAE,GAAGzB,CAAS,CAAA,MAAA,CAAQ,OAAQ,CAAC,CAAA,CAC3D,KAAOA,CAAYyB,EAAAA,CAAAA,CAAQ,CAAE,GAAGzB,EAAS,MAAQ,CAAA,MAAO,CAAC,CACzD,CAAA,GAAA,CAAMA,GAAYyB,CAAQ,CAAA,CAAE,GAAGzB,CAAS,CAAA,MAAA,CAAQ,KAAM,CAAC,CAAA,CACvD,QAAAyB,CACA,CAAA,SAAA,CAAAD,CACF,CACF","file":"index.js","sourcesContent":["export type AuthToken = string | undefined;\n\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\n): Promise<string | undefined> => {\n  const token =\n    typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n","import type {\n  ArrayStyle,\n  ObjectStyle,\n  SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n  allowReserved?: boolean;\n  array?: SerializerOptions<ArrayStyle>;\n  object?: SerializerOptions<ObjectStyle>;\n}\n\nconst serializeFormDataPair = (data: FormData, key: string, value: unknown) => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T) =>\n    JSON.stringify(body, (key, value) =>\n      typeof value === 'bigint' ? value.toString() : value,\n    ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data.toString();\n  },\n};\n","interface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\n\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\n\nexport interface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n}) => {\n  if (value instanceof Date) {\n    return `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n","import type {\n  ArraySeparatorStyle,\n  QuerySerializer,\n  QuerySerializerOptions,\n} from '@hey-api/client-core';\nimport {\n  getAuthToken,\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '@hey-api/client-core';\n\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    let search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          search = [\n            ...search,\n            serializeArrayParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'form',\n              value,\n              ...array,\n            }),\n          ];\n          continue;\n        }\n\n        if (typeof value === 'object') {\n          search = [\n            ...search,\n            serializeObjectParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'deepObject',\n              value: value as Record<string, unknown>,\n              ...object,\n            }),\n          ];\n          continue;\n        }\n\n        search = [\n          ...search,\n          serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          }),\n        ];\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Record<any, unknown>;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'header':\n      default:\n        options.headers[name] = token;\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    path: options.path,\n    // let `paramsSerializer()` handle query params if it exists\n    query: !options.paramsSerializer ? options.query : undefined,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\n/**\n * Special Axios headers keywords allowing to set headers by request method.\n */\nexport const axiosHeadersKeywords = [\n  'common',\n  'delete',\n  'get',\n  'head',\n  'patch',\n  'post',\n  'put',\n] as const;\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Record<any, unknown> => {\n  const mergedHeaders: Record<any, unknown> = {};\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator = Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (\n        axiosHeadersKeywords.includes(\n          key as (typeof axiosHeadersKeywords)[number],\n        ) &&\n        typeof value === 'object'\n      ) {\n        mergedHeaders[key] = {\n          ...(mergedHeaders[key] as Record<any, unknown>),\n          ...value,\n        };\n      } else if (value === null) {\n        delete mergedHeaders[key];\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          // @ts-expect-error\n          mergedHeaders[key] = [...(mergedHeaders[key] ?? []), v as string];\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders[key] =\n          typeof value === 'object' ? JSON.stringify(value) : (value as string);\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...override,\n});\n","import type { AxiosError, RawAxiosRequestHeaders } from 'axios';\nimport axios from 'axios';\n\nimport type { Client, Config } from './types';\nimport {\n  buildUrl,\n  createConfig,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from './utils';\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { auth, ...configWithoutAuth } = _config;\n  const instance = axios.create(configWithoutAuth);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    instance.defaults = {\n      ...instance.defaults,\n      ..._config,\n      // @ts-expect-error\n      headers: mergeHeaders(instance.defaults.headers, _config.headers),\n    };\n    return getConfig();\n  };\n\n  // @ts-expect-error\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      axios: options.axios ?? _config.axios ?? instance,\n      headers: mergeHeaders(_config.headers, options.headers),\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.body && opts.bodySerializer) {\n      opts.body = opts.bodySerializer(opts.body);\n    }\n\n    const url = buildUrl(opts);\n\n    try {\n      // assign Axios here for consistency with fetch\n      const _axios = opts.axios!;\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { auth, ...optsWithoutAuth } = opts;\n      const response = await _axios({\n        ...optsWithoutAuth,\n        baseURL: opts.baseURL as string,\n        data: opts.body,\n        headers: opts.headers as RawAxiosRequestHeaders,\n        // let `paramsSerializer()` handle query params if it exists\n        params: opts.paramsSerializer ? opts.query : undefined,\n        url,\n      });\n\n      let { data } = response;\n\n      if (opts.responseType === 'json') {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return {\n        ...response,\n        data: data ?? {},\n      };\n    } catch (error) {\n      const e = error as AxiosError;\n      if (opts.throwOnError) {\n        throw e;\n      }\n      // @ts-expect-error\n      e.error = e.response?.data ?? {};\n      return e;\n    }\n  };\n\n  return {\n    buildUrl,\n    delete: (options) => request({ ...options, method: 'DELETE' }),\n    get: (options) => request({ ...options, method: 'GET' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'HEAD' }),\n    instance,\n    options: (options) => request({ ...options, method: 'OPTIONS' }),\n    patch: (options) => request({ ...options, method: 'PATCH' }),\n    post: (options) => request({ ...options, method: 'POST' }),\n    put: (options) => request({ ...options, method: 'PUT' }),\n    request,\n    setConfig,\n  } as Client;\n};\n"]}