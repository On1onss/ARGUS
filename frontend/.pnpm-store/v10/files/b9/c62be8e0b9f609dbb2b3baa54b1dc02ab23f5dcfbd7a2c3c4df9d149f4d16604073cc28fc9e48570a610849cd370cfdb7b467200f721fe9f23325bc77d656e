import * as react_jsx_runtime from 'react/jsx-runtime';
import { BoxProps } from '@chakra-ui/react';
import { CurveProps, TooltipProps } from 'recharts';
import * as React$1 from 'react';
import { SystemProps } from '@chakra-ui/styled-system';
import { CurveType } from 'recharts/types/shape/Curve';
import { LineDot } from 'recharts/types/cartesian/Line';
import { ValueType, NameType, Props } from 'recharts/types/component/DefaultTooltipContent';

interface SparklineProps extends BoxProps {
    /**
     * The chart data.
     */
    data: Array<Record<string, string | number>>;
    /**
     * The categories to display, values map to keys in data.
     * @default ['value']
     */
    categories?: string[];
    /**
     * Colors to use for each category.
     * @default ['primary', 'gray']
     */
    colors?: string[];
    /**
     * The curve type of the area.
     */
    curveType?: CurveProps['type'];
    /**
     * The width of the line.
     */
    strokeWidth?: number;
    /**
     * The sparkline variant.
     * @default gradient
     */
    variant?: 'line' | 'solid' | 'gradient';
    /**
     * Whether to show animation.
     * @default false
     */
    showAnimation?: boolean;
    /**
     * The animation duration.
     * @default 500
     */
    animationDuration?: number;
    /**
     * Whether to connect null values.
     * @default true
     */
    connectNulls?: boolean;
    /**
     * Whether to stack the categories.
     * @default false
     */
    stack?: boolean;
}
/**
 * Sparkline
 * @see Docs https://saas-ui.dev/docs/components/visualization/sparkline
 */
declare const Sparkline: (props: SparklineProps) => react_jsx_runtime.JSX.Element;
/**
 * @deprecated Use `Sparkline` instead.
 */
declare const Sparklines: (props: SparklineProps) => react_jsx_runtime.JSX.Element;

interface BaseChartProps {
    /**
     * The data to be displayed in the chart.
     */
    data: Record<string, string | number>[];
    /**
     * The data keys to be displayed in the chart.
     */
    categories?: string[];
    /**
     * The colors to use for each category.
     */
    colors?: string[];
    /**
     * The y-axis data key to use.
     * @default 'date'
     */
    index?: string;
    /**
     * If set 0, all the ticks will be shown. If set preserveStart", "preserveEnd" or "preserveStartEnd", the ticks which is to be shown or hidden will be calculated automatically.
     */
    intervalType?: 'preserveStartEnd' | 'equidistantPreserveStart' | 'preserveStart' | 'preserveEnd' | number;
    /**
     * The height of the chart.
     */
    height: SystemProps['height'];
    /**
     * Format the value of the x-axis.
     * @param value
     */
    valueFormatter?(value: number): string;
    /**
     * Show decimals on the y-axis.
     */
    allowDecimals?: boolean;
    /**
     * Wether to show the animation or not.
     */
    showAnimation?: boolean;
    /**
     * Wether to show the grid or not.
     */
    showGrid?: boolean;
    /**
     * Wether to show the legend or not.
     */
    showLegend?: boolean;
    /**
     * Wether to show the tooltip or not.
     */
    showTooltip?: boolean;
    /**
     * Wether to show the x-axis or not.
     */
    showXAxis?: boolean;
    /**
     * Wether to show the y-axis or not.
     */
    showYAxis?: boolean;
    /**
     * Animation duration in milliseconds.
     */
    animationDuration?: number;
    /**
     * Only show the start and end ticks on the x-axis.
     */
    startEndOnly?: boolean;
    /**
     * Render custom tooltip content.
     */
    tooltipContent?(props: TooltipProps<any, any>): React.ReactNode;
    /**
     * Width of the y-axis labels.
     */
    yAxisWidth?: number;
    /**
     * Height of the legend.
     */
    legendHeight?: number;
    /**
     * Children to render.
     */
    children?: React.ReactNode;
}

interface AreaChartProps extends BaseChartProps {
    /**
     * Whether to connect null values.
     */
    connectNulls?: boolean;
    /**
     * The curve type of the area.
     */
    curveType?: CurveType;
    /**
     * The width of the line.
     */
    strokeWidth?: string | number;
    /**
     * Whether to stack the areas.
     */
    stack?: boolean;
    /**
     * The type of offset function used to generate the lower and upper values in the series array. The four types are built-in offsets in d3-shape.
     */
    stackOffset?: 'expand' | 'none' | 'wiggle' | 'silhouette';
    /**
     * The area chart variant.
     * @default gradient
     */
    variant?: 'solid' | 'gradient' | 'line';
    /**
     * The lower bound of the y-axis.
     * @default 0
     */
    minValue?: number | 'auto';
    /**
     * The upper bound of the y-axis.
     * @default 'auto'
     */
    maxValue?: number | 'auto';
}
/**
 * AreaChart
 * @see Docs https://saas-ui.dev/docs/components/visualization/area-chart
 */
declare const AreaChart: React$1.ForwardRefExoticComponent<AreaChartProps & React$1.RefAttributes<HTMLDivElement>>;

interface LineChartProps extends BaseChartProps {
    /**
     * Whether to connect null values.
     */
    connectNulls?: boolean;
    /**
     * The curve type of the line.
     */
    curveType?: CurveType;
    /**
     * Whether to show line dots.
     * @default false
     */
    dot?: LineDot;
    /**
     * The width of the line.
     */
    strokeWidth?: string | number;
    /**
     * The lower bound of the y-axis.
     * @default 0
     */
    minValue?: number | 'auto';
    /**
     * The upper bound of the y-axis.
     * @default 'auto'
     */
    maxValue?: number | 'auto';
}
/**
 * LineChart
 * @see Docs https://saas-ui.dev/docs/components/visualization/line-chart
 */
declare const LineChart: React$1.ForwardRefExoticComponent<LineChartProps & React$1.RefAttributes<HTMLDivElement>>;

interface BarChartProps extends BaseChartProps {
    /**
     * Gap between bars in pixels or percentage.
     */
    barGap?: string | number;
    /**
     * Gap between categories in pixels or percentage.
     */
    barCategoryGap?: string | number;
    /**
     * Size of the bars in pixels.
     */
    barSize?: number;
    /**
     * Radius of the bars.
     */
    radius?: number | [number, number, number, number];
    /**
     * Whether to stack the bars.
     */
    stack?: boolean;
    /**
     * The type of offset function used to generate the lower and upper values in the series array. The four types are built-in offsets in d3-shape.
     */
    stackOffset?: 'expand' | 'none' | 'wiggle' | 'silhouette' | 'sign';
    /**
     * The bar chart variant.
     * @default gradient
     */
    variant?: 'solid' | 'gradient';
    /**
     * The lower bound of the y-axis.
     * @default 0
     */
    minValue?: number | 'auto';
    /**
     * The upper bound of the y-axis.
     * @default 'auto'
     */
    maxValue?: number | 'auto';
}
/**
 * BarChart
 * @see Docs https://saas-ui.dev/docs/components/visualization/bar-chart
 */
declare const BarChart: React$1.ForwardRefExoticComponent<BarChartProps & React$1.RefAttributes<HTMLDivElement>>;

interface ChartTooltipProps<TValue extends ValueType, TName extends NameType> extends Props<TValue, TName> {
    categoryColors: Record<string, string>;
}
declare const ChartTooltip: <TValue extends ValueType, TName extends NameType>(props: ChartTooltipProps<TValue, TName>) => react_jsx_runtime.JSX.Element;

export { AreaChart, type AreaChartProps, BarChart, type BarChartProps, type BaseChartProps, ChartTooltip, type ChartTooltipProps, LineChart, type LineChartProps, Sparkline, type SparklineProps, Sparklines };
